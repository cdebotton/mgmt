// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'jquery', 'ns', 'jst', 'animate'], function(Backbone, $, ns) {
    ns('United.Views.Projects.ProjectDrawer');
    return United.Views.Projects.ProjectDrawer = (function(_super) {
      var TASK_DRAWER_OPEN;

      __extends(ProjectDrawer, _super);

      function ProjectDrawer() {
        this.printColors = __bind(this.printColors, this);

        this.printUsers = __bind(this.printUsers, this);

        this.saveProject = __bind(this.saveProject, this);

        this.bindEscape = __bind(this.bindEscape, this);

        this.closeDrawer = __bind(this.closeDrawer, this);

        this.newTask = __bind(this.newTask, this);

        this.setClient = __bind(this.setClient, this);

        this.setCode = __bind(this.setCode, this);

        this.setName = __bind(this.setName, this);
        return ProjectDrawer.__super__.constructor.apply(this, arguments);
      }

      TASK_DRAWER_OPEN = false;

      ProjectDrawer.prototype.tagName = 'section';

      ProjectDrawer.prototype.className = 'project-drawer';

      ProjectDrawer.prototype.events = {
        'click button[type="submit"]': 'saveProject',
        'click .add-task-to-project': 'newTask',
        'click .icon-remove': 'closeDrawer',
        'keyup input[name="name"]': 'setName',
        'keyup input[name="code"]': 'setCode',
        'keyup input[name="client"]': 'setClient'
      };

      ProjectDrawer.prototype.initialize = function() {
        this.model.get('project').get('tasks').on('add', this.selectNewTask, this);
        this.model.on('change:selected', this.editTask, this);
        United.EventBus.on('animate-drawer-in', this.animateIn, this);
        United.JST.Hb.registerHelper('printUsers', this.printUsers);
        return United.JST.Hb.registerHelper('printColors', this.printColors);
      };

      ProjectDrawer.prototype.render = function() {
        var ctx, html;
        this.body = $('body');
        ctx = this.model.get('project').toJSON();
        html = United.JST.ProjectDrawer(ctx);
        this.$el.html(html);
        this.taskHolder = this.$el.find('#project-task-holder');
        return this;
      };

      ProjectDrawer.prototype.setName = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectDrawer.prototype.setCode = function(e) {
        return this.model.get('project').set('code', e.currentTarget.value);
      };

      ProjectDrawer.prototype.setClient = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectDrawer.prototype.selectNewTask = function(model) {
        return this.model.set('selected', model);
      };

      ProjectDrawer.prototype.newTask = function(e) {
        var d, n, t;
        d = new Date();
        t = new Date(d.getFullYear(), d.getMonth(), d.getDate());
        n = new Date(t.getTime());
        n.setDate(n.getDate() + 14);
        this.model.get('project').get('tasks').add({
          name: 'New Task',
          start_date: t,
          end_date: n,
          project: this.model.get('project')
        });
        return e.preventDefault();
      };

      ProjectDrawer.prototype.editTask = function(model, task) {
        var ctx, e, html, s;
        s = task.get('start_date');
        e = task.get('end_date');
        ctx = task.toJSON();
        ctx.start_month = s.getMonth() + 1;
        ctx.start_day = s.getDate();
        ctx.start_year = s.getFullYear();
        ctx.end_month = e.getMonth() + 1;
        ctx.end_day = e.getDate();
        ctx.end_year = e.getFullYear();
        html = United.JST.ProjectTaskDrawer(ctx);
        this.taskHolder.html(html);
        return this;
      };

      ProjectDrawer.prototype.animateIn = function() {
        this.$el.css('margin-top', -this.$el.innerHeight());
        this.$el.animate({
          'margin-top': 0
        }, 175, 'ease-in');
        return this.body.bind('keyup', this.bindEscape);
      };

      ProjectDrawer.prototype.closeDrawer = function(e) {
        var _this = this;
        this.$el.animate({
          'margin-top': -this.$el.innerHeight()
        }, 175, 'ease-out', function() {
          _this.remove();
          return United.EventBus.trigger('close-project-drawer');
        });
        return e.preventDefault();
      };

      ProjectDrawer.prototype.bindEscape = function(e) {
        if (e.keyCode === 27) {
          return this.closeDrawer(e);
        }
      };

      ProjectDrawer.prototype.saveProject = function(e) {};

      ProjectDrawer.prototype.printUsers = function(array, opts) {
        var buffer, item, key, user, _i, _len, _ref;
        if (array != null ? array.length : void 0) {
          buffer = '';
          for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
            user = array[key];
            item = {
              id: user.id,
              email: user.email,
              selected: ((_ref = this.model.get('task')) != null ? _ref.has('user') : void 0) && +user.id === +this.model.get('task').get('user').get('id') ? ' SELECTED' : ''
            };
            buffer += opts.fn(item);
          }
          return buffer;
        } else {
          return opts.elseFn;
        }
      };

      ProjectDrawer.prototype.printColors = function(opts) {
        var buffer, color, colors, id, _ref;
        colors = {
          blue: 'Blue',
          red: 'Red',
          green: 'Green',
          yellow: 'Yellow'
        };
        buffer = '';
        for (id in colors) {
          color = colors[id];
          buffer += opts.fn({
            id: id,
            color: color,
            selected: ((_ref = this.model.get('task')) != null ? _ref.get('color') : void 0) === id ? ' SELECTED' : ''
          });
        }
        return buffer;
      };

      return ProjectDrawer;

    })(Backbone.View);
  });

}).call(this);
