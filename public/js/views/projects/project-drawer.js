// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'jquery', 'ns', 'jst', 'animate', 'views/tasks/task-element'], function(Backbone, $, ns) {
    ns('United.Views.Projects.ProjectDrawer');
    return United.Views.Projects.ProjectDrawer = (function(_super) {
      var TASK_DRAWER_OPEN;

      __extends(ProjectDrawer, _super);

      function ProjectDrawer() {
        this.printColors = __bind(this.printColors, this);

        this.printUsers = __bind(this.printUsers, this);

        this.saveTask = __bind(this.saveTask, this);

        this.saveProject = __bind(this.saveProject, this);

        this.updatePercentage = __bind(this.updatePercentage, this);

        this.updateUserId = __bind(this.updateUserId, this);

        this.updateColor = __bind(this.updateColor, this);

        this.updateEndDay = __bind(this.updateEndDay, this);

        this.updateEndMonth = __bind(this.updateEndMonth, this);

        this.updateEndYear = __bind(this.updateEndYear, this);

        this.updateStartDay = __bind(this.updateStartDay, this);

        this.updateStartMonth = __bind(this.updateStartMonth, this);

        this.updateStartYear = __bind(this.updateStartYear, this);

        this.bindEscape = __bind(this.bindEscape, this);

        this.closeDrawer = __bind(this.closeDrawer, this);

        this.updateTaskName = __bind(this.updateTaskName, this);

        this.newTask = __bind(this.newTask, this);

        this.setClient = __bind(this.setClient, this);

        this.setCode = __bind(this.setCode, this);

        this.setName = __bind(this.setName, this);
        return ProjectDrawer.__super__.constructor.apply(this, arguments);
      }

      TASK_DRAWER_OPEN = false;

      ProjectDrawer.prototype.tagName = 'section';

      ProjectDrawer.prototype.className = 'project-drawer';

      ProjectDrawer.prototype.events = {
        'click button[type="submit"]': 'saveProject',
        'click .add-task-to-project': 'newTask',
        'click .icon-remove': 'closeDrawer',
        'click #save-task': 'saveTask',
        'keyup input[name="project-name"]': 'setName',
        'keyup input[name="code"]': 'setCode',
        'keyup input[name="client"]': 'setClient',
        'keyup input[name="task-name"]': 'updateTaskName',
        'keyup input[name="start_year"]': 'updateStartYear',
        'keyup input[name="start_month"]': 'updateStartMonth',
        'keyup input[name="start_day"]': 'updateStartDay',
        'keyup input[name="end_year"]': 'updateEndYear',
        'keyup input[name="end_month"]': 'updateEndMonth',
        'keyup input[name="end_day"]': 'updateEndDay',
        'keyup input[name="percentage"]': 'updatePercentage',
        'change select[name="color"]': 'updateColor',
        'change select[name="user_id"]': 'updateUserId'
      };

      ProjectDrawer.prototype.initialize = function() {
        this.model.get('project').get('tasks').on('add', this.selectNewTask, this);
        this.model.get('project').get('tasks').on('add', this.updateTaskPreview, this);
        this.model.on('change:selected', this.editTask, this);
        United.EventBus.on('animate-drawer-in', this.animateIn, this);
        United.JST.Hb.registerHelper('printUsers', this.printUsers);
        return United.JST.Hb.registerHelper('printColors', this.printColors);
      };

      ProjectDrawer.prototype.render = function() {
        var ctx, html;
        this.body = $('body');
        ctx = this.model.get('project').toJSON();
        html = United.JST.ProjectDrawer(ctx);
        this.$el.html(html);
        this.taskHolder = this.$el.find('#project-task-holder');
        this.projectOverview = this.$el.find('#project-overview');
        return this;
      };

      ProjectDrawer.prototype.setName = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectDrawer.prototype.setCode = function(e) {
        return this.model.get('project').set('code', e.currentTarget.value);
      };

      ProjectDrawer.prototype.setClient = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectDrawer.prototype.selectNewTask = function(model) {
        model.on('change', this.updateTaskPreview, this);
        return this.model.set('selected', model);
      };

      ProjectDrawer.prototype.newTask = function(e) {
        var d, n, t;
        d = new Date();
        t = new Date(d.getFullYear(), d.getMonth(), d.getDate());
        n = new Date(t.getTime());
        n.setDate(n.getDate() + 14);
        this.model.get('project').get('tasks').add({
          name: 'New Task',
          start_date: t,
          end_date: n,
          project: this.model.get('project')
        });
        return e.preventDefault();
      };

      ProjectDrawer.prototype.editTask = function(model, task) {
        var ctx, e, h, html, s;
        s = task.get('start_date');
        e = task.get('end_date');
        ctx = task.toJSON();
        console.log(ctx);
        ctx.start_month = s.getMonth() + 1;
        ctx.start_day = s.getDate();
        ctx.start_year = s.getFullYear();
        ctx.end_month = e.getMonth() + 1;
        ctx.end_day = e.getDate();
        ctx.end_year = e.getFullYear();
        ctx.users = this.model.get('users').toJSON();
        html = United.JST.ProjectTaskDrawer(ctx);
        this.taskHolder.html(html);
        h = this.taskHolder.innerHeight();
        this.taskHolder.css({
          height: 0,
          opacity: 1
        });
        this.taskHolder.animate({
          height: h
        }, 175, 'ease-in');
        return this;
      };

      ProjectDrawer.prototype.updateTaskName = function(e) {
        return this.model.get('selected').set('name', e.currentTarget.value);
      };

      ProjectDrawer.prototype.updateTaskPreview = function(task) {
        var end, start, tasks,
          _this = this;
        this.projectOverview.html('');
        tasks = this.model.get('project').get('tasks');
        start = tasks.first().get('start_date');
        tasks.comparator = function(task) {
          return task.get('end_date');
        };
        end = tasks.last().get('end_date');
        start = start.getTime();
        end = end.getTime();
        this.projectOverview.css({
          height: tasks.length * 50 + ((tasks.length - 1) * 10)
        });
        return tasks.each(function(task, key) {
          var dx, e, el, s, view, width;
          view = new United.Views.Tasks.TaskElement({
            model: task,
            demo: true
          });
          el = view.render().$el;
          el.addClass('demo');
          s = view.model.get('start_date').getTime();
          e = view.model.get('end_date').getTime();
          dx = 10 + (s - start) * 910;
          width = 10 + ((e - start) / (end - start)) * 910;
          el.css({
            left: dx,
            width: width
          });
          return _this.projectOverview.append(el);
        });
      };

      ProjectDrawer.prototype.animateIn = function() {
        this.$el.css('margin-top', -this.$el.innerHeight());
        this.$el.animate({
          'margin-top': 0
        }, 175, 'ease-in');
        return this.body.bind('keyup', this.bindEscape);
      };

      ProjectDrawer.prototype.closeDrawer = function(e) {
        var _this = this;
        this.$el.animate({
          'margin-top': -this.$el.innerHeight()
        }, 175, 'ease-out', function() {
          _this.remove();
          return United.EventBus.trigger('close-project-drawer');
        });
        return e.preventDefault();
      };

      ProjectDrawer.prototype.bindEscape = function(e) {
        if (e.keyCode === 27) {
          return this.closeDrawer(e);
        }
      };

      ProjectDrawer.prototype.updateStartYear = function(e) {
        var new_date, selected, start_date, target;
        selected = this.model.get('selected');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value);
        new_date = new Date(target, start_date.getMonth(), start_date.getDate(), 0, 0, 0);
        return this.model.get('selected').set('start_date', new_date);
      };

      ProjectDrawer.prototype.updateStartMonth = function(e) {
        var new_date, selected, start_date, target;
        selected = this.model.get('selected');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value) - 1;
        new_date = new Date(start_date.getFullYear(), target, start_date.getDate(), 0, 0, 0);
        return this.model.get('selected').set('start_date', new_date);
      };

      ProjectDrawer.prototype.updateStartDay = function(e) {
        var new_date, selected, start_date, target;
        selected = this.model.get('selected');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value);
        new_date = new Date(start_date.getFullYear(), start_date.getMonth(), target, 0, 0, 0);
        return this.model.get('selected').set('start_date', new_date);
      };

      ProjectDrawer.prototype.updateEndYear = function(e) {
        var end_date, new_date, selected, target;
        selected = this.model.get('selected');
        end_date = selected.get('end_date');
        target = parseInt(e.currentTarget.value);
        new_date = new Date(target, end_date.getMonth(), end_date.getDate(), 0, 0, 0);
        return this.model.get('selected').set('end_date', new_date);
      };

      ProjectDrawer.prototype.updateEndMonth = function(e) {
        var end_date, new_date, selected, target;
        selected = this.model.get('selected');
        end_date = selected.get('end_date');
        target = parseInt(e.currentTarget.value) - 1;
        new_date = new Date(end_date.getFullYear(), target, end_date.getDate(), 0, 0, 0);
        return this.model.get('selected').set('end_date', new_date);
      };

      ProjectDrawer.prototype.updateEndDay = function(e) {
        var end_date, new_date, selected, target;
        selected = this.model.get('selected');
        end_date = selected.get('end_date');
        target = parseInt(e.currentTarget.value);
        new_date = new Date(end_date.getFullYear(), end_date.getMonth(), target, 0, 0, 0);
        return this.model.get('selected').set('end_date', new_date);
      };

      ProjectDrawer.prototype.updateColor = function(e) {
        return this.model.get('selected').set('color', e.currentTarget.value);
      };

      ProjectDrawer.prototype.updateUserId = function(e) {
        return this.model.get('selected').set('user_id', e.currentTarget.value);
      };

      ProjectDrawer.prototype.updatePercentage = function(e) {
        return this.model.get('selected').set('percentage', parseInt(e.currentTarget.value));
      };

      ProjectDrawer.prototype.saveProject = function(e) {};

      ProjectDrawer.prototype.saveTask = function(e) {
        var _this = this;
        if (this.model.get('project').isNew()) {
          return this.model.get('project').save(null, {
            wait: true,
            success: function(project, attrs, status) {
              project.set('id', attrs.id);
              _this.model.get('selected').set('author_id', window.user_id);
              return _this.model.get('selected').save(null, {
                wait: true,
                success: function(task, attrs, status) {
                  return _this.model.get('selected').set('id', attrs.id);
                }
              });
            }
          });
        }
      };

      ProjectDrawer.prototype.printUsers = function(array, opts) {
        var buffer, item, key, user, _i, _len, _ref;
        if (array != null ? array.length : void 0) {
          buffer = '';
          for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
            user = array[key];
            item = {
              id: user.id,
              email: user.email,
              selected: ((_ref = this.model.get('task')) != null ? _ref.has('user') : void 0) && +user.id === +this.model.get('task').get('user').get('id') ? ' SELECTED' : ''
            };
            buffer += opts.fn(item);
          }
          return buffer;
        } else {
          return opts.elseFn;
        }
      };

      ProjectDrawer.prototype.printColors = function(opts) {
        var buffer, color, colors, id, _ref;
        colors = {
          blue: 'Blue',
          red: 'Red',
          green: 'Green',
          yellow: 'Yellow'
        };
        buffer = '';
        for (id in colors) {
          color = colors[id];
          buffer += opts.fn({
            id: id,
            color: color,
            selected: ((_ref = this.model.get('task')) != null ? _ref.get('color') : void 0) === id ? ' SELECTED' : ''
          });
        }
        return buffer;
      };

      return ProjectDrawer;

    })(Backbone.View);
  });

}).call(this);
