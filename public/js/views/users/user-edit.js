// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'ns', 'jst', 'animate'], function(Backbone, ns) {
    ns('United.Views.Users.UserEdit');
    return United.Views.Users.UserEdit = (function(_super) {
      var MONTHS;

      __extends(UserEdit, _super);

      function UserEdit() {
        this.cancelUser = __bind(this.cancelUser, this);

        this.saveUser = __bind(this.saveUser, this);

        this.updateConfirmPassword = __bind(this.updateConfirmPassword, this);

        this.updatePassword = __bind(this.updatePassword, this);

        this.updatePdo = __bind(this.updatePdo, this);

        this.updateHiredOnYear = __bind(this.updateHiredOnYear, this);

        this.updateHiredOnDay = __bind(this.updateHiredOnDay, this);

        this.updateHiredOnMonth = __bind(this.updateHiredOnMonth, this);

        this.updateEmail = __bind(this.updateEmail, this);

        this.updateLastName = __bind(this.updateLastName, this);

        this.updateFirstName = __bind(this.updateFirstName, this);
        return UserEdit.__super__.constructor.apply(this, arguments);
      }

      UserEdit.prototype.el = '#user-drawer';

      MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      UserEdit.prototype.events = {
        'keyup [name="first-name"]': 'updateFirstName',
        'keyup [name="last-name"]': 'updateLastName',
        'keyup [name="email"]': 'updateEmail',
        'keyup [name="hired-on-month"]': 'updateHiredOnMonth',
        'keyup [name="hired-on-day"]': 'updateHiredOnDay',
        'keyup [name="hired-on-year"]': 'updateHiredOnYear',
        'keyup [name="pdo"]': 'updatePdo',
        'keyup [name="password"]': 'updatePassword',
        'keyup [name="confrim-password"]': 'updateConfirmPassword',
        'click #save-user': 'saveUser',
        'click #cancel-user': 'cancelUser'
      };

      UserEdit.prototype.initialize = function() {
        United.JST.Hb.registerHelper('printLogin', this.printLogin);
        return this.model.on('change:first_name change:last_name', this.updateTitle, this);
      };

      UserEdit.prototype.updateFirstName = function(e) {
        return this.model.set('first_name', e.currentTarget.value);
      };

      UserEdit.prototype.updateLastName = function(e) {
        return this.model.set('last_name', e.currentTarget.value);
      };

      UserEdit.prototype.updateEmail = function(e) {
        return this.model.set('email', e.currentTarget.value);
      };

      UserEdit.prototype.updateHiredOnMonth = function(e) {};

      UserEdit.prototype.updateHiredOnDay = function(e) {};

      UserEdit.prototype.updateHiredOnYear = function(e) {};

      UserEdit.prototype.updatePdo = function(e) {
        return this.model.set('pdo_allotment', e.currentTarget.value);
      };

      UserEdit.prototype.updatePassword = function(e) {};

      UserEdit.prototype.updateConfirmPassword = function(e) {};

      UserEdit.prototype.updateTitle = function(model, value, status) {
        this.title.html("" + (this.model.get('first_name')) + " " + (this.model.get('last_name')));
        return console.log(this.title.html());
      };

      UserEdit.prototype.saveUser = function(e) {
        return e.preventDefault();
      };

      UserEdit.prototype.cancelUser = function(e) {
        return e.preventDefault();
      };

      UserEdit.prototype.render = function() {
        var ctx, h, hired, html;
        ctx = this.model.toJSON();
        hired = new Date(ctx.hired_on);
        ctx.hired_on_month = parseInt(hired.getMonth()) + 1;
        ctx.hired_on_day = hired.getDate();
        ctx.hired_on_year = hired.getFullYear();
        html = United.JST.UserEdit(ctx);
        this.$el.html(html);
        this.title = this.$('#username');
        h = this.$el.innerHeight() + 10;
        this.$el.css({
          marginTop: -h,
          display: 'block'
        }).animate({
          marginTop: 0
        }, '175', 'ease-out');
        return this;
      };

      UserEdit.prototype.printLogin = function(login, name) {
        var d, h, m;
        d = new Date(login);
        if (login.match(/^0000/)) {
          return "" + name + " has never logged in.";
        } else {
          h = d.getHours();
          if (h < 10) {
            h = "0" + h;
          }
          m = d.getMinutes();
          if (m < 10) {
            m = "0" + m;
          }
          return "<strong>Last seen</strong> " + MONTHS[d.getMonth()] + " " + (d.getDate()) + ", " + (d.getFullYear()) + " at " + h + ":" + m;
        }
      };

      return UserEdit;

    })(Backbone.View);
  });

}).call(this);
