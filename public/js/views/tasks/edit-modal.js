// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'jquery', 'jst', 'animate', 'models/tasks/task', 'views/widgets/livesearch-input', 'models/widgets/livesearch'], function(Backbone, _, ns, $) {
    ns('United.Views.Tasks.EditModal');
    return United.Views.Tasks.EditModal = (function(_super) {

      __extends(EditModal, _super);

      function EditModal() {
        this.printColors = __bind(this.printColors, this);

        this.printUsers = __bind(this.printUsers, this);

        this.saveTask = __bind(this.saveTask, this);

        this.bindEscape = __bind(this.bindEscape, this);

        this.closeModal = __bind(this.closeModal, this);

        this.dropModal = __bind(this.dropModal, this);
        return EditModal.__super__.constructor.apply(this, arguments);
      }

      EditModal.prototype.tagName = 'section';

      EditModal.prototype.className = 'striped-cheech';

      EditModal.prototype.events = {
        'click .icon-remove': 'closeModal',
        'click button[type="submit"]': 'saveTask'
      };

      EditModal.prototype.initialize = function() {
        United.JST.Hb.registerHelper('printUsers', this.printUsers);
        return United.JST.Hb.registerHelper('printColors', this.printColors);
      };

      EditModal.prototype.render = function() {
        var ctx, html, task, today;
        this.body = $('body');
        if (this.model.has('task')) {
          task = this.model.get('task');
          ctx = this.model.get('task').toJSON();
          ctx.user_list = window.users;
          ctx.start_month = task.get('start_date').getMonth() + 1;
          ctx.start_day = task.get('start_date').getDate();
          ctx.start_year = task.get('start_date').getFullYear();
          ctx.end_month = task.get('end_date').getMonth() + 1;
          ctx.end_day = task.get('end_date').getDate();
          ctx.end_year = task.get('end_date').getFullYear();
        } else {
          today = new Date;
          ctx = {
            start_month: today.getMonth() + 1,
            start_day: today.getDate(),
            start_year: today.getFullYear(),
            end_month: today.getMonth() + 1,
            end_day: today.getDate(),
            end_year: today.getFullYear(),
            user_list: window.users
          };
        }
        html = United.JST.EditModal(ctx);
        this.$el.html(html);
        this.expose();
        return this;
      };

      EditModal.prototype.setup = function() {
        return this.liveSearch = new United.Views.Widgets.LiveSearchInput({
          el: '#task-search',
          model: new United.Models.Widgets.LiveSearch({
            queryUri: '/api/v1/schedules/unassigned'
          })
        });
      };

      EditModal.prototype.expose = function() {
        this.body.bind('keyup', this.bindEscape);
        return this.$el.css('opacity', 0).animate({
          opacity: 1
        }, 150, 'ease-in', this.dropModal);
      };

      EditModal.prototype.dropModal = function() {
        this.setup();
        return this.$('.edit-modal').delay(150).css({
          top: '50%',
          opacity: 1,
          marginTop: -($(window).height() + 250)
        }).animate({
          marginTop: -250
        });
      };

      EditModal.prototype.closeModal = function(e) {
        var _this = this;
        this.$('.edit-modal').animate({
          marginTop: -($(window).height() + 250)
        }, function() {
          return _this.$el.animate({
            opacity: 0
          }, function() {
            return _this.$el.remove();
          });
        });
        this.body.unbind('keyup', this.bindEscape);
        United.EventBus.trigger('modal-closed');
        return e.preventDefault();
      };

      EditModal.prototype.bindEscape = function(e) {
        if (e.keyCode === 27) {
          return this.closeModal(e);
        }
      };

      EditModal.prototype.saveTask = function(e) {
        var attr, attrs, key, task;
        attrs = {
          'author_id': window.author_id,
          'name': this.$('[name="name"]').val(),
          'project_code': this.$('[name="project_code"]').val(),
          'client': this.$('[name="client"]').val(),
          'start_date': new Date(this.$('[name="start_year"]').val(), parseInt(this.$('[name="start_month"]').val()) - 1, this.$('[name="start_day"]').val()),
          'end_date': new Date(this.$('[name="end_year"]').val(), parseInt(this.$('[name="end_month"]').val()) - 1, this.$('[name="end_day"]').val()),
          'color': this.$('[name="color"]').val(),
          'track': 0,
          'percentage': $('[name="percentage"]').val(),
          'user': {
            'id': parseInt(this.$('[name="developer_id"]').val())
          }
        };
        if (this.model.has('task')) {
          for (attr in attrs) {
            key = attrs[attr];
            this.model.get('task').set(attr, key);
          }
          this.model.get('task').save();
        } else {
          task = new United.Models.Tasks.Task(attrs);
          task.save(null, {
            wait: true
          });
        }
        return this.closeModal(e);
      };

      EditModal.prototype.printUsers = function(array, opts) {
        var buffer, item, key, user, _i, _len, _ref;
        if (array != null ? array.length : void 0) {
          buffer = '';
          for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
            user = array[key];
            item = {
              id: user.id,
              email: user.email,
              selected: ((_ref = this.model.get('task')) != null ? _ref.has('user') : void 0) && +user.id === +this.model.get('task').get('user').get('id') ? ' SELECTED' : ''
            };
            buffer += opts.fn(item);
          }
          return buffer;
        } else {
          return opts.elseFn;
        }
      };

      EditModal.prototype.printColors = function(opts) {
        var buffer, color, colors, id, _ref;
        colors = {
          blue: 'Blue',
          red: 'Red',
          green: 'Green',
          yellow: 'Yellow'
        };
        buffer = '';
        for (id in colors) {
          color = colors[id];
          buffer += opts.fn({
            id: id,
            color: color,
            selected: ((_ref = this.model.get('task')) != null ? _ref.get('color') : void 0) === id ? ' SELECTED' : ''
          });
        }
        return buffer;
      };

      return EditModal;

    })(Backbone.View);
  });

}).call(this);
