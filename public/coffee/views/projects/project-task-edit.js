// Generated by IcedCoffeeScript 1.3.1b
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['backbone', 'ns', 'jst'], function(Backbone, ns) {
    ns('United.Views.Projects.ProjectTaskEdit');
    return United.Views.Projects.ProjectTaskEdit = (function(_super) {

      __extends(ProjectTaskEdit, _super);

      ProjectTaskEdit.name = 'ProjectTaskEdit';

      function ProjectTaskEdit() {
        this.printColors = __bind(this.printColors, this);

        this.printUsers = __bind(this.printUsers, this);

        this.updatePercentage = __bind(this.updatePercentage, this);

        this.updateUserId = __bind(this.updateUserId, this);

        this.updateColor = __bind(this.updateColor, this);

        this.updateEndDay = __bind(this.updateEndDay, this);

        this.updateEndMonth = __bind(this.updateEndMonth, this);

        this.updateEndYear = __bind(this.updateEndYear, this);

        this.updateStartDay = __bind(this.updateStartDay, this);

        this.updateStartMonth = __bind(this.updateStartMonth, this);

        this.updateStartYear = __bind(this.updateStartYear, this);

        this.updateTaskName = __bind(this.updateTaskName, this);

        this.animateOut = __bind(this.animateOut, this);
        return ProjectTaskEdit.__super__.constructor.apply(this, arguments);
      }

      ProjectTaskEdit.prototype.events = {
        'click #task-done': 'animateOut',
        'keyup input[name="task-name"]': 'updateTaskName',
        'keyup input[name="start_year"]': 'updateStartYear',
        'keyup input[name="start_month"]': 'updateStartMonth',
        'keyup input[name="start_day"]': 'updateStartDay',
        'keyup input[name="end_year"]': 'updateEndYear',
        'keyup input[name="end_month"]': 'updateEndMonth',
        'keyup input[name="end_day"]': 'updateEndDay',
        'keyup input[name="percentage"]': 'updatePercentage',
        'change select[name="color"]': 'updateColor',
        'change select[name="user_id"]': 'updateUserId'
      };

      ProjectTaskEdit.prototype.initialize = function() {
        United.JST.Hb.registerHelper('printUsers', this.printUsers);
        return United.JST.Hb.registerHelper('printColors', this.printColors);
      };

      ProjectTaskEdit.prototype.render = function() {
        var ctx, e, h, html, s, task;
        this.$el.css('opacity', 0);
        task = this.model.get('task');
        s = task.get('start_date');
        e = task.get('end_date');
        ctx = task.toJSON();
        if (task.get('user')) ctx.user_id = task.get('user').get('id');
        ctx.start_month = s.getMonth() + 1;
        ctx.start_day = s.getDate();
        ctx.start_year = s.getFullYear();
        ctx.end_month = e.getMonth() + 1;
        ctx.end_day = e.getDate();
        ctx.end_year = e.getFullYear();
        ctx.users = window.users;
        html = United.JST.ProjectTaskDrawer(ctx);
        this.$el.css('height', 'auto');
        this.$el.html(html);
        h = this.$el.innerHeight();
        this.$el.css({
          height: 0,
          opacity: 1
        });
        this.$el.animate({
          height: h
        }, 175, 'ease-in');
        return this;
      };

      ProjectTaskEdit.prototype.animateOut = function() {
        var _this = this;
        return this.$el.animate({
          height: 0
        }, 175, 'ease-out', function() {
          United.EventBus.trigger('close-project-task-drawer');
          return _this.remove();
        });
      };

      ProjectTaskEdit.prototype.updateTaskName = function(e) {
        return this.model.get('task').set('name', e.currentTarget.value);
      };

      ProjectTaskEdit.prototype.updateStartYear = function(e) {
        var d, selected, start_date, target;
        selected = this.model.get('task');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value);
        if (target.toString().match(/^\d{4}$/)) {
          d = new Date(end_date);
          d.setYear(target);
          if (d > selected.get('start_date')) {
            return this.model.get('task').set('end_date', d);
          }
        }
      };

      ProjectTaskEdit.prototype.updateStartMonth = function(e) {
        var d, selected, start_date, target;
        selected = this.model.get('task');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value);
        if ((0 < target && target < 13)) {
          d = new Date(start_date);
          d.setMonth(target - 1);
          if (d < selected.get('end_date')) {
            return this.model.get('task').set('start_date', d);
          }
        }
      };

      ProjectTaskEdit.prototype.updateStartDay = function(e) {
        var d, selected, start_date, target;
        selected = this.model.get('task');
        start_date = selected.get('start_date');
        target = parseInt(e.currentTarget.value);
        if ((0 < target && target < 32)) {
          d = new Date(start_date);
          d.setDate(target);
          if (d < selected.get('end_date')) {
            return this.model.get('task').set('start_date', d);
          }
        }
      };

      ProjectTaskEdit.prototype.updateEndYear = function(e) {
        var d, end_date, selected, target;
        selected = this.model.get('task');
        end_date = selected.get('end_date');
        target = parseInt(e.currentTarget.value);
        if (target.toString().match(/^\d{4}$/)) {
          d = new Date(end_date);
          d.setYear(target);
          if (d > selected.get('start_date')) {
            return this.model.get('task').set('end_date', d);
          }
        }
      };

      ProjectTaskEdit.prototype.updateEndMonth = function(e) {
        var _this = this;
        clearTimeout(this.keyPressTimer);
        return this.keyPressTimer = setTimeout(function() {
          var end_date, new_date, selected, target;
          selected = _this.model.get('task');
          end_date = selected.get('end_date');
          target = parseInt(e.currentTarget.value);
          if (target > 12) {
            target = 12;
          } else if (target < 1) {
            target = 1;
          }
          new_date = new Date(end_date.getFullYear(), target - 1, end_date.getDate(), 0, 0, 0);
          if (new_date < _this.model.get('start_date')) return;
          return _this.model.get('task').set('end_date', new_date);
        }, this.keyPressTimeout);
      };

      ProjectTaskEdit.prototype.updateEndDay = function(e) {
        var _this = this;
        clearTimeout(this.keyPressTimer);
        return this.keyPressTimer = setTimeout(function() {
          var end_date, new_date, selected, target;
          selected = _this.model.get('task');
          end_date = selected.get('end_date');
          target = parseInt(e.currentTarget.value);
          if (target > 31) {
            target = 31;
          } else if (target < 1) {
            target = 1;
          }
          new_date = new Date(end_date.getFullYear(), end_date.getMonth(), target, 0, 0, 0);
          if (new_date < _this.model.get('start_date')) return;
          return _this.model.get('task').set('end_date', new_date);
        }, this.keyPressTimeout);
      };

      ProjectTaskEdit.prototype.updateColor = function(e) {
        return this.model.get('task').set('color', e.currentTarget.value);
      };

      ProjectTaskEdit.prototype.updateUserId = function(e) {
        return this.model.get('task').set('user_id', e.currentTarget.value);
      };

      ProjectTaskEdit.prototype.updatePercentage = function(e) {
        return this.model.get('task').set('percentage', parseInt(e.currentTarget.value));
      };

      ProjectTaskEdit.prototype.printUsers = function(array, user_id, opts) {
        var buffer, item, key, user, _i, _len;
        if (array != null ? array.length : void 0) {
          buffer = '';
          for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
            user = array[key];
            item = {
              id: user.id,
              email: user.email,
              selected: user_id && +user.id === +user_id ? ' SELECTED' : ''
            };
            buffer += opts.fn(item);
          }
          return buffer;
        } else {
          return opts.elseFn;
        }
      };

      ProjectTaskEdit.prototype.printColors = function(opts) {
        var buffer, color, colors, id, _ref;
        colors = {
          blue: 'Blue',
          red: 'Red',
          green: 'Green',
          yellow: 'Yellow'
        };
        buffer = '';
        for (id in colors) {
          color = colors[id];
          buffer += opts.fn({
            id: id,
            color: color,
            selected: ((_ref = this.model.get('task')) != null ? _ref.get('color') : void 0) === id ? ' SELECTED' : ''
          });
        }
        return buffer;
      };

      return ProjectTaskEdit;

    })(Backbone.View);
  });

}).call(this);
