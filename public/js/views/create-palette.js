// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'dropdown'], function(Backbone, _, namespace) {
    namespace('BU.View.CreatePalette');
    return BU.View.CreatePalette = (function(_super) {

      __extends(CreatePalette, _super);

      function CreatePalette() {
        this.stopPropagation = __bind(this.stopPropagation, this);

        this.createTask = __bind(this.createTask, this);
        return CreatePalette.__super__.constructor.apply(this, arguments);
      }

      CreatePalette.prototype.el = '#task-create-palette';

      CreatePalette.prototype.events = {
        'click input': 'stopPropagation',
        'click button': 'stopPropagation',
        'click button[type="submit"]': 'createTask',
        'blur .day-field': 'checkDayRange',
        'blur .month-field': 'checkMonthRange',
        'blur .year-field': 'checkYearRange'
      };

      CreatePalette.prototype.initialize = function() {};

      CreatePalette.prototype.createTask = function(e) {
        var $author, $client, $code, $color, $dev, $eday, $emonth, $eyear, $name, $sday, $smonth, $syear, dev_id, key;
        e.preventDefault();
        $author = this.$('[name="author_id"]');
        $name = this.$('[name="name"]');
        $client = this.$('[name="client"]');
        $code = this.$('[name="project_code"]');
        $smonth = this.$('[name="start_month"]');
        $sday = this.$('[name="start_day"]');
        $syear = this.$('[name="start_year"]');
        $emonth = this.$('[name="end_month"]');
        $eday = this.$('[name="end_day"]');
        $eyear = this.$('[name="end_year"]');
        $dev = this.$('[name="developer_id"]');
        $color = this.$('[name="color"]');
        dev_id = $dev.val();
        if ((key = _.indexOf(this.model.get('users').pluck('id'), dev_id)) > -1) {
          this.model.get('users').at(key).get('tasks').create({
            author_id: $author.val(),
            name: $name.val(),
            client: $client.val(),
            project_code: $code.val(),
            start_date: new Date($syear.val(), $smonth.val() - 1, $sday.val()),
            end_date: new Date($eyear.val(), $emonth.val() - 1, $eday.val()),
            developer_id: dev_id,
            color: $color.val()
          });
        }
        return e.preventDefault();
      };

      CreatePalette.prototype.checkDayRange = function(e) {
        var int;
        int = parseInt(e.currentTarget.value);
        if (int < 1) {
          int = 1;
        } else if (int > 31) {
          int = 31;
        } else if (isNaN(int)) {
          int = (new Date()).getDate();
        }
        return e.currentTarget.value = int;
      };

      CreatePalette.prototype.checkMonthRange = function(e) {
        var int;
        int = parseInt(e.currentTarget.value);
        if (int < 1) {
          int = 1;
        } else if (int > 12) {
          int = 12;
        } else if (isNaN(int)) {
          int = (new Date()).getMonth() + 1;
        }
        return e.currentTarget.value = int;
      };

      CreatePalette.prototype.checkYearRange = function(e) {
        var currentYear, int, limYear, minYear;
        int = parseInt(e.currentTarget.value);
        currentYear = (new Date()).getFullYear();
        limYear = currentYear + 10;
        minYear = currentYear - 10;
        if (int > limYear) {
          int = limYear;
        } else if (int < minYear) {
          int = minYear;
        } else if (isNaN(int)) {
          int = currentYear;
        }
        return e.currentTarget.value = int;
      };

      CreatePalette.prototype.stopPropagation = function(e) {
        return e.stopPropagation();
      };

      return CreatePalette;

    })(Backbone.View);
  });

}).call(this);
