// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'views/widgets/livesearch-list', 'lib/keycodes'], function(Backbone, _, ns) {
    ns('United.Views.Widgets.LiveSearchInput');
    return United.Views.Widgets.LiveSearchInput = (function(_super) {
      var LIST_VISIBLE;

      __extends(LiveSearchInput, _super);

      function LiveSearchInput() {
        this.itemSelected = __bind(this.itemSelected, this);

        this.sorter = __bind(this.sorter, this);

        this.drawResults = __bind(this.drawResults, this);

        this.move = __bind(this.move, this);

        this.keyUp = __bind(this.keyUp, this);

        this.keyPress = __bind(this.keyPress, this);

        this.keyDown = __bind(this.keyDown, this);
        return LiveSearchInput.__super__.constructor.apply(this, arguments);
      }

      LIST_VISIBLE = false;

      LiveSearchInput.prototype.events = {
        'keydown': 'keyDown',
        'keypress': 'keyPress',
        'keyup': 'keyUp'
      };

      LiveSearchInput.prototype.initialize = function() {
        this.list = new United.Views.Widgets.LiveSearchList({
          listenTo: this.cid
        });
        this.model.on('change:results', this.render, this);
        this.$el.wrap('<span class="live-search"></span>');
        this.wrapper = this.$el.parent('.live-search');
        this.wrapper.append(this.list.$el);
        this.icons = $('<span class="add-on"><i class="icon icon-search"></i><i class="icon icon-remove icon-white"></i></span>');
        return this.$el.after(this.icons);
      };

      LiveSearchInput.prototype.keyDown = function(e) {
        this.suppressKeyPressRepeat = _.indexOf([40, 38, 9, 13, 27], e.keyCode) > 0;
        return this.move(e);
      };

      LiveSearchInput.prototype.keyPress = function(e) {
        if (this.suppressKeyPressRepeat) {
          return;
        }
        return this.move(e);
      };

      LiveSearchInput.prototype.keyUp = function(e) {
        switch (e.keyCode) {
          case United.Keyboard.DOWN:
            break;
          case United.Keyboard.UP:
            break;
          case United.Keyboard.SHIFT:
            break;
          case United.Keyboard.CTRL:
            break;
          case United.Keyboard.ALT:
            break;
          case United.Keyboard.TAB:
            if (!LIST_VISIBLE) {
              return;
            }
            this.select();
            break;
          case United.Keyboard.ENTER:
            if (!LIST_VISIBLE) {
              return;
            }
            this.select();
            break;
          case United.Keyboard.ESC:
            if (!LIST_VISIBLE) {
              return;
            }
            this.hide();
            break;
          default:
            this.lookup();
        }
        e.stopPropagation();
        return e.preventDefault();
      };

      LiveSearchInput.prototype.move = function(e) {
        if (!LIST_VISIBLE) {
          return;
        }
        switch (e.keyCode) {
          case United.Keyboard.TAB:
            e.preventDefault();
            break;
          case United.Keyboard.ENTER:
            e.preventDefault();
            break;
          case United.Keyboard.ESC:
            e.preventDefault();
            break;
          case United.Keyboard.UP:
            e.preventDefault();
            this.previous();
            break;
          case United.Keyboard.DOWN:
            e.preventDefault();
            this.next();
        }
        return e.stopPropagation();
      };

      LiveSearchInput.prototype.lookup = function() {
        this.model.unset('currentIndex');
        this.model.unset('results');
        this.query = this.$el.val();
        if (this.model.has('queryUri')) {
          return this.model.fetch({
            success: this.drawResults
          });
        } else {
          return this.drawResults();
        }
      };

      LiveSearchInput.prototype.drawResults = function() {
        var results,
          _this = this;
        results = this.model.get('sources').filter(function(source, key) {
          return ~source.get('name').toLowerCase().indexOf(_this.query.toLowerCase());
        });
        if (results.length > 0 && this.query !== '') {
          LIST_VISIBLE = true;
          results = new Backbone.Collection(this.sorter(results));
          results.on('selected', this.itemSelected, this);
          United.EventBus.trigger('search-results-found', this.query, results, this.cid);
          this.model.set('results', results);
          return this.model.set('currentIndex', 0);
        } else {
          return this.hide();
        }
      };

      LiveSearchInput.prototype.sorter = function(results) {
        var beginsWith, caseInsensitive, caseSensitive, item;
        beginsWith = [];
        caseSensitive = [];
        caseInsensitive = [];
        while ((item = results.shift())) {
          if (!item.get('name').toLowerCase().indexOf(this.query.toLowerCase())) {
            beginsWith.push(item);
          } else if (~item.get('name').indexOf(this.query)) {
            caseSensitive.push(item);
          } else {
            caseInsensitive.push(item);
          }
        }
        return beginsWith.concat(caseSensitive, caseInsensitive);
      };

      LiveSearchInput.prototype.hide = function() {
        LIST_VISIBLE = false;
        return United.EventBus.trigger('live-search-hide', this.cid);
      };

      LiveSearchInput.prototype.previous = function() {
        return this.model.set('currentIndex', this.model.get('currentIndex') - 1);
      };

      LiveSearchInput.prototype.next = function() {
        return this.model.set('currentIndex', this.model.get('currentIndex') + 1);
      };

      LiveSearchInput.prototype.select = function(selection) {
        if (typeof selection === 'undefined') {
          selection = this.model.get('results').at(this.model.get('currentIndex'));
        }
        this.$el.val(selection.get('name'));
        this.$el.attr('disabled', true);
        this.icons.on('click', _.bind(this.deselect, this));
        this.model.set({
          result: selection
        });
        return this.hide();
      };

      LiveSearchInput.prototype.deselect = function(e) {
        this.icons.off('click', _.bind(this.deselect, this));
        this.$el.removeAttr('disabled');
        this.$el.val('');
        this.model.unset('results');
        this.model.unset('currentIndex');
        this.model.set('value', null);
        return e.preventDefault();
      };

      LiveSearchInput.prototype.itemSelected = function(model) {
        return this.select(model);
      };

      LiveSearchInput.prototype.setValue = function(property, value) {
        var target;
        target = this.model.get('sources').find(function(src) {
          return src.get(property) === value;
        });
        return this.select(target);
      };

      return LiveSearchInput;

    })(Backbone.View);
  });

}).call(this);
