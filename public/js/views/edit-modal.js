// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'ns', 'jquery', 'jst', 'animate'], function(Backbone, ns, $) {
    ns('BU.View.EditModal');
    return BU.View.EditModal = (function(_super) {

      __extends(EditModal, _super);

      function EditModal() {
        this.printColors = __bind(this.printColors, this);

        this.printUsers = __bind(this.printUsers, this);

        this.saveTask = __bind(this.saveTask, this);

        this.closeModal = __bind(this.closeModal, this);

        this.dropModal = __bind(this.dropModal, this);
        return EditModal.__super__.constructor.apply(this, arguments);
      }

      EditModal.prototype.tagName = 'section';

      EditModal.prototype.className = 'striped-cheech';

      EditModal.prototype.events = {
        'click .icon-remove': 'closeModal',
        'click button[type="submit"]': 'saveTask'
      };

      EditModal.prototype.initialize = function() {
        BU.JST.Hb.registerHelper('printUsers', this.printUsers);
        return BU.JST.Hb.registerHelper('printColors', this.printColors);
      };

      EditModal.prototype.render = function() {
        var ctx, html;
        ctx = this.model.toJSON();
        ctx.user_list = window.users;
        ctx.start_month = this.model.get('start_date').getMonth() + 1;
        ctx.start_day = this.model.get('start_date').getDate();
        ctx.start_year = this.model.get('start_date').getFullYear();
        ctx.end_month = this.model.get('end_date').getMonth() + 1;
        ctx.end_day = this.model.get('end_date').getDate();
        ctx.end_year = this.model.get('end_date').getFullYear();
        html = BU.JST.EditModal(ctx);
        this.$el.html(html);
        this.expose();
        return this;
      };

      EditModal.prototype.expose = function() {
        return this.$el.css('opacity', 0).animate({
          opacity: 1
        }, 150, 'ease-in', this.dropModal);
      };

      EditModal.prototype.dropModal = function() {
        return this.$('.edit-modal').delay(150).css({
          top: '50%',
          opacity: 1,
          marginTop: -($(window).height() + 250)
        }).animate({
          marginTop: -250
        });
      };

      EditModal.prototype.closeModal = function(e) {
        var _this = this;
        this.$('.edit-modal').animate({
          marginTop: -($(window).height() + 250)
        }, function() {
          return _this.$el.animate({
            opacity: 0
          }, function() {
            return _this.$el.remove();
          });
        });
        return e.preventDefault();
      };

      EditModal.prototype.saveTask = function(e) {
        this.model.set({
          'author_id': window.author_id,
          'name': this.$('[name="name"]').val(),
          'project_code': this.$('[name="project_code"]').val(),
          'client': this.$('[name="client"]').val(),
          'start_date': new Date(this.$('[name="start_year"]').val(), parseInt(this.$('[name="start_month"]').val()) - 1, this.$('[name="start_day"]').val()),
          'end_date': new Date(this.$('[name="end_year"]').val(), parseInt(this.$('[name="end_month"]').val()) - 1, this.$('[name="end_day"]').val()),
          'developer_id': this.$('[name="developer_id"]').val(),
          'color': this.$('[name="color"]').val()
        });
        this.model.get('pivot').percentange = $('[name="percentange"]').val();
        this.model.save();
        return this.closeModal(e);
      };

      EditModal.prototype.printUsers = function(array, opts) {
        var buffer, item, key, user, _i, _len;
        if (array != null ? array.length : void 0) {
          buffer = '';
          for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
            user = array[key];
            item = {
              id: user.id,
              email: user.email,
              selected: this.model.has('user') && +user.id === +this.model.get('user').get('id') ? ' SELECTED' : ''
            };
            buffer += opts.fn(item);
          }
          return buffer;
        } else {
          return opts.elseFn;
        }
      };

      EditModal.prototype.printColors = function(opts) {
        var buffer, color, colors, id;
        colors = {
          blue: 'Blue',
          red: 'Red',
          green: 'Green',
          yellow: 'Yellow'
        };
        buffer = '';
        for (id in colors) {
          color = colors[id];
          buffer += opts.fn({
            id: id,
            color: color,
            selected: this.model.get('color') === id ? ' SELECTED' : ''
          });
        }
        return buffer;
      };

      return EditModal;

    })(Backbone.View);
  });

}).call(this);
