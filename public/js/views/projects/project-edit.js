// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'jquery', 'ns', 'jst', 'animate', 'views/tasks/task-element', 'views/projects/project-task-edit', 'models/projects/project-task-edit', 'views/projects/project-overview', 'models/projects/project-overview'], function(Backbone, $, ns) {
    ns('United.Views.Projects.ProjectEdit');
    return United.Views.Projects.ProjectEdit = (function(_super) {
      var TASK_DRAWER_OPEN;

      __extends(ProjectEdit, _super);

      function ProjectEdit() {
        this.saveProject = __bind(this.saveProject, this);

        this.bindEscape = __bind(this.bindEscape, this);

        this.closeDrawer = __bind(this.closeDrawer, this);

        this.newTask = __bind(this.newTask, this);

        this.setClient = __bind(this.setClient, this);

        this.setCode = __bind(this.setCode, this);

        this.setName = __bind(this.setName, this);
        return ProjectEdit.__super__.constructor.apply(this, arguments);
      }

      TASK_DRAWER_OPEN = false;

      ProjectEdit.prototype.tagName = 'section';

      ProjectEdit.prototype.className = 'project-drawer';

      ProjectEdit.prototype.events = {
        'click button[type="submit"]': 'saveProject',
        'click .add-task-to-project': 'newTask',
        'click .icon-remove': 'closeDrawer',
        'keyup input[name="project-name"]': 'setName',
        'keyup input[name="code"]': 'setCode',
        'keyup input[name="client"]': 'setClient'
      };

      ProjectEdit.prototype.initialize = function() {
        return United.EventBus.on('animate-drawer-in', this.animateIn, this);
      };

      ProjectEdit.prototype.render = function() {
        var ctx, html;
        this.body = $('body');
        ctx = this.model.get('project').toJSON();
        html = United.JST.ProjectDrawer(ctx);
        this.$el.html(html);
        this.overview = new United.Views.Projects.ProjectOverview({
          model: new United.Models.Projects.ProjectOverview({
            project: this.model.get('project')
          })
        });
        return this;
      };

      ProjectEdit.prototype.setName = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectEdit.prototype.setCode = function(e) {
        return this.model.get('project').set('code', e.currentTarget.value);
      };

      ProjectEdit.prototype.setClient = function(e) {
        return this.model.get('project').set('name', e.currentTarget.value);
      };

      ProjectEdit.prototype.selectNewTask = function(model) {};

      ProjectEdit.prototype.newTask = function(e) {
        this.model.get('project').get('tasks').add({});
        return e.preventDefault();
      };

      ProjectEdit.prototype.updateTaskPreview = function(task) {
        var end, start, tasks,
          _this = this;
        this.projectOverview.html('');
        tasks = this.model.get('project').get('tasks');
        start = tasks.first().get('start_date');
        tasks.comparator = function(task) {
          return task.get('end_date');
        };
        end = tasks.last().get('end_date');
        start = start.getTime();
        end = end.getTime();
        this.projectOverview.css({
          height: tasks.length * 50 + ((tasks.length - 1) * 10)
        });
        return tasks.each(function(task, key) {
          var dx, e, el, s, view, width;
          view = new United.Views.Tasks.TaskElement({
            model: task,
            demo: true
          });
          el = view.render().$el;
          el.addClass('demo');
          s = view.model.get('start_date').getTime();
          e = view.model.get('end_date').getTime();
          dx = 10 + (s - start) * 910;
          width = 10 + ((e - start) / (end - start)) * 910;
          el.css({
            left: dx,
            width: width
          });
          return _this.projectOverview.append(el);
        });
      };

      ProjectEdit.prototype.animateIn = function() {
        this.$el.css('margin-top', -this.$el.innerHeight());
        this.$el.animate({
          'margin-top': 0
        }, 175, 'ease-in');
        return this.body.bind('keyup', this.bindEscape);
      };

      ProjectEdit.prototype.closeDrawer = function(e) {
        var _this = this;
        this.$el.animate({
          'margin-top': -this.$el.innerHeight()
        }, 175, 'ease-out', function() {
          _this.remove();
          return United.EventBus.trigger('close-project-drawer');
        });
        return e.preventDefault();
      };

      ProjectEdit.prototype.bindEscape = function(e) {
        if (e.keyCode === 27) {
          return this.closeDrawer(e);
        }
      };

      ProjectEdit.prototype.saveProject = function(e) {};

      return ProjectEdit;

    })(Backbone.View);
  });

}).call(this);
