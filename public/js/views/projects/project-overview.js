// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'views/tasks/task-element'], function(Backbone, _, ns) {
    ns('United.Views.Projects.ProjectOverview');
    return United.Views.Projects.ProjectOverview = (function(_super) {

      __extends(ProjectOverview, _super);

      function ProjectOverview() {
        this.addOne = __bind(this.addOne, this);

        this.addAll = __bind(this.addAll, this);
        return ProjectOverview.__super__.constructor.apply(this, arguments);
      }

      ProjectOverview.prototype.tasks = [];

      ProjectOverview.prototype.el = '#project-overview';

      ProjectOverview.prototype.viewportHeight = 20;

      ProjectOverview.prototype.initialize = function() {
        this.model.get('project').get('tasks').on('add', this.addAll, this);
        this.model.get('project').get('tasks').on('change', this.addAll, this);
        return this.addAll();
      };

      ProjectOverview.prototype.addAll = function() {
        var _this = this;
        this.viewportHeight = 20;
        this.generateRange();
        _.each(this.tasks, function(task, key) {
          task.remove();
          return delete _this.tasks[key];
        });
        this.tasks = [];
        this.$el.html('');
        this.model.get('project').get('tasks').each(this.addOne);
        return this.$el.css('height', this.viewportHeight + 35);
      };

      ProjectOverview.prototype.addOne = function(task, key) {
        var comp, compend, compstart, dx, dy, e, el, end, s, siblings, start, view, width, _i, _len;
        view = new United.Views.Tasks.TaskElement({
          model: task,
          demo: true
        });
        el = view.render().$el;
        el.addClass('demo');
        s = view.model.get('start_date').getTime();
        e = view.model.get('end_date').getTime();
        dx = 10 + ((s - this.start) * this.scale);
        width = (e - s) * this.scale;
        dy = 15;
        siblings = _.without(this.tasks, task);
        for (key = _i = 0, _len = siblings.length; _i < _len; key = ++_i) {
          comp = siblings[key];
          start = task.get('start_date');
          end = task.get('end_date');
          compstart = comp.model.get('start_date');
          compend = comp.model.get('end_date');
          if (start < compend && end > compstart && comp.options.dy === dy) {
            dy += 60;
            if (dy > this.viewportHeight) {
              this.viewportHeight = dy;
            }
          }
        }
        el.css({
          left: dx,
          top: dy,
          width: width
        });
        view.options.dy = dy;
        this.tasks.push(view);
        return this.$el.append(el);
      };

      ProjectOverview.prototype.generateRange = function() {
        var diff, end, start, tasks;
        tasks = this.model.get('project').get('tasks');
        if (tasks.length) {
          tasks.comparator = function(task) {
            return task.get('start_date');
          };
          tasks.sort();
          start = tasks.first().get('start_date');
          tasks.comparator = function(task) {
            return task.get('end_date');
          };
          tasks.sort();
          end = tasks.last().get('end_date');
          tasks.comparator = function(task) {
            return task.get('start_date');
          };
          tasks.sort();
          this.start = start.getTime();
          this.end = end.getTime();
          diff = end - start;
          this.scale = 910 / diff;
          return this.$el.css({
            height: tasks.length * 50 + ((tasks.length - 1) * 10)
          });
        }
      };

      return ProjectOverview;

    })(Backbone.View);
  });

}).call(this);
