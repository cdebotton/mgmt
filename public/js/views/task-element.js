// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'ns', 'jst'], function(Backbone, namespace) {
    namespace('BU.View.TaskElement');
    return BU.View.TaskElement = (function(_super) {
      var DAY_TO_MILLISECONDS, PX_PER_DAY;

      __extends(TaskElement, _super);

      function TaskElement() {
        this.updateColor = __bind(this.updateColor, this);

        this.editModal = __bind(this.editModal, this);

        this.scrubStop = __bind(this.scrubStop, this);

        this.scrubMove = __bind(this.scrubMove, this);

        this.scrubStart = __bind(this.scrubStart, this);
        return TaskElement.__super__.constructor.apply(this, arguments);
      }

      DAY_TO_MILLISECONDS = 86400000;

      PX_PER_DAY = 21;

      TaskElement.prototype.tagName = 'div';

      TaskElement.prototype.className = 'task-element';

      TaskElement.prototype.events = {
        'mousedown .grip': 'scrubStart',
        'mousedown': 'scrubStart',
        'click .icon-edit': 'editModal'
      };

      TaskElement.prototype.initialize = function() {
        BU.EventBus.on('offset-timeline', this.offsetTimeline, this);
        BU.JST.Hb.registerHelper('formatDate', this.formatDate);
        BU.EventBus.on('start-drag', this.setOpacity, this);
        BU.EventBus.on('stop-drag', this.unsetOpacity, this);
        this.body = $('body');
        this.body.on('mousemove', this.scrubMove);
        this.body.on('mouseup', this.scrubStop);
        this.start = this.model.get('start_date');
        this.end = this.model.get('end_date');
        this.model.on('change:end_date', this.updatePositions, this);
        this.model.on('change:start_date', this.updatePositions, this);
        this.model.on('change:track', this.updatePositions, this);
        this.model.on('change:color', this.updateColor, this);
        if (this.model.get('color') !== null) {
          this.$el.addClass(this.model.get('color'));
        }
        return BU.EventBus.on('gridpoint-dispatch', this.gridPointsReceived, this);
      };

      TaskElement.prototype.render = function() {
        var ctx, html;
        BU.EventBus.trigger('where-am-i', this.cid, this.start, this.end);
        ctx = this.model.toJSON();
        html = BU.JST['TaskElement'](ctx);
        this.$el.html(html);
        return this;
      };

      TaskElement.prototype.updatePositions = function(model) {
        this.start = this.model.get('start_date');
        this.end = this.model.get('end_date');
        BU.EventBus.trigger('where-am-i', this.cid, this.start, this.end);
        return this.render();
      };

      TaskElement.prototype.gridPointsReceived = function(cid, p1, p2, offset) {
        var dx, width;
        if (cid !== this.cid) {
          return false;
        }
        dx = p1;
        width = p2 - p1;
        return this.$el.css({
          marginLeft: dx,
          width: width,
          marginTop: 10 + this.model.get('track') * 60,
          '-webkit-transform': "translate3d(" + offset + "px, 0, 0)"
        });
      };

      TaskElement.prototype.scrubStart = function(e) {
        var obj;
        if (e.which !== 1) {
          return false;
        }
        BU.EventBus.trigger('start-drag', this.model.get('id'));
        this.dragging = true;
        obj = $(e.currentTarget);
        this.property = (function() {
          switch (1 === 1) {
            case obj.hasClass('left'):
              return ['start_date'];
            case obj.hasClass('right'):
              return ['end_date'];
            default:
              return ['start_date', 'end_date'];
          }
        })();
        this.initX = e.pageX;
        e.stopImmediatePropagation();
        return e.preventDefault();
      };

      TaskElement.prototype.scrubMove = function(e) {
        var date, days, dx, epoch, key, left, property, right, targetTrack, units, updateObject, _i, _len, _ref;
        if (!this.dragging) {
          return false;
        }
        updateObject = {
          start_date: this.model.get('start_date'),
          end_date: this.model.get('end_date'),
          track: this.model.get('track')
        };
        if (this.property.length > 1) {
          targetTrack = Math.floor((e.pageY - this.$el.parent().offset().top) / 48);
          if (targetTrack !== updateObject.track) {
            updateObject.track = targetTrack;
          }
        }
        dx = e.pageX - this.initX;
        if (Math.abs(dx) > PX_PER_DAY) {
          units = Math.round(dx / PX_PER_DAY);
          days = DAY_TO_MILLISECONDS * units;
          this.initX = e.pageX;
          _ref = this.property;
          for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
            property = _ref[key];
            date = this.model.get(property);
            epoch = date.getTime();
            epoch += days;
            date = new Date(epoch);
            if (updateObject[property] !== date) {
              updateObject[property] = date;
            }
          }
        }
        this.model.set(updateObject);
        left = this.$el.offset().left;
        right = left + this.$el.outerWidth();
        return BU.EventBus.trigger('update-timeline-transform', e.pageX, left, right, dx);
      };

      TaskElement.prototype.scrubStop = function(e) {
        if (this.dragging) {
          BU.EventBus.trigger('stop-drag', this.model.get('id'));
          this.dragging = false;
          this.property = void 0;
          this.initX = 0;
          return this.model.save();
        }
      };

      TaskElement.prototype.setOpacity = function(id) {
        if (id !== this.model.get('id')) {
          return this.$el.css('opacity', 0.35);
        }
      };

      TaskElement.prototype.unsetOpacity = function(id) {
        if (id !== this.model.get('id')) {
          return this.$el.css('opacity', 1);
        }
      };

      TaskElement.prototype.formatDate = function(date) {
        var months;
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return new Handlebars.SafeString("" + months[date.getMonth()] + ". " + (date.getDate()) + ", " + (date.getFullYear()));
      };

      TaskElement.prototype.offsetTimeline = function(dx) {
        return this.$el.css({
          '-webkit-transform': "translate3d(" + dx + ")"
        });
      };

      TaskElement.prototype.editModal = function(e) {
        BU.EventBus.trigger('open-modal', this.model);
        return e.preventDefault();
      };

      TaskElement.prototype.updateColor = function() {
        return this.$el[0].className = "task-element " + (this.model.get('color'));
      };

      return TaskElement;

    })(Backbone.View);
  });

}).call(this);
