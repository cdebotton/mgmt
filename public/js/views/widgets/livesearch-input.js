// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'views/widgets/livesearch-list', 'lib/keycodes', 'jst'], function(Backbone, _, ns) {
    ns('United.Views.Widgets.LiveSearchInput');
    return United.Views.Widgets.LiveSearchInput = (function(_super) {
      var LIST_VISIBLE;

      __extends(LiveSearchInput, _super);

      function LiveSearchInput() {
        this.move = __bind(this.move, this);

        this.keyUp = __bind(this.keyUp, this);

        this.keyPress = __bind(this.keyPress, this);

        this.keyDown = __bind(this.keyDown, this);
        return LiveSearchInput.__super__.constructor.apply(this, arguments);
      }

      LIST_VISIBLE = false;

      LiveSearchInput.prototype.events = {
        'keydown': 'keyDown',
        'keypress': 'keyPress',
        'keyup': 'keyUp'
      };

      LiveSearchInput.prototype.initialize = function() {
        United.JST.Hb.registerHelper('printResults', this.printResults);
        return this.model.on('change:results', this.render, this);
      };

      LiveSearchInput.prototype.keyDown = function(e) {
        this.suppressKeyPressRepeat = _.indexOf([40, 38, 9, 13, 27], e.keyCode) > 0;
        return this.move(e);
      };

      LiveSearchInput.prototype.keyPress = function(e) {
        if (this.suppressKeyPressRepeat) {
          return;
        }
        return this.move(e);
      };

      LiveSearchInput.prototype.keyUp = function(e) {
        switch (e.keyCode) {
          case United.Keyboard.DOWN:
            break;
          case United.Keyboard.UP:
            break;
          case United.Keyboard.SHIFT:
            break;
          case United.Keyboard.CTRL:
            break;
          case United.Keyboard.ALT:
            break;
          case United.Keyboard.TAB:
            if (!LIST_VISIBLE) {
              return;
            }
            this.select();
            break;
          case United.Keyboard.ENTER:
            if (!LIST_VISIBLE) {
              return;
            }
            this.select();
            break;
          case United.Keyboard.ESC:
            if (!LIST_VISIBLE) {
              return;
            }
            this.hide();
            break;
          default:
            this.lookup();
        }
        e.stopPropagation();
        return e.preventDefault();
      };

      LiveSearchInput.prototype.select = function() {};

      LiveSearchInput.prototype.lookup = function() {
        var results, string;
        string = this.$el.val();
        results = this.model.get('sources').filter(function(source, key) {
          return ~source.get('name').toLowerCase().indexOf(string.toLowerCase());
        });
        return this.model.set({
          string: string,
          results: new Backbone.Collection(results)
        });
      };

      LiveSearchInput.prototype.render = function() {
        return console.log(this.model.get('results').toJSON());
      };

      LiveSearchInput.prototype.hide = function() {};

      LiveSearchInput.prototype.move = function(e) {
        if (!LIST_VISIBLE) {
          return;
        }
        switch (e.keyCode) {
          case United.Keyboard.TAB:
            e.preventDefault();
            break;
          case United.Keyboard.ENTER:
            e.preventDefault();
            break;
          case United.Keyboard.ESC:
            e.preventDefault();
            break;
          case United.Keyboard.UP:
            e.preventDefault();
            this.previous();
            break;
          case United.Keyboard.DOWN:
            e.preventDefault();
            this.next();
        }
        return e.stopPropagation();
      };

      LiveSearchInput.prototype.previous = function() {};

      LiveSearchInput.prototype.next = function() {};

      return LiveSearchInput;

    })(Backbone.View);
  });

}).call(this);
