// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'views/tasks/user-badge'], function(Backbone, _, ns) {
    ns('United.Views.Tasks.ProfilePalette');
    return United.Views.Tasks.ProfilePalette = (function(_super) {

      __extends(ProfilePalette, _super);

      function ProfilePalette() {
        this.addOne = __bind(this.addOne, this);
        return ProfilePalette.__super__.constructor.apply(this, arguments);
      }

      ProfilePalette.prototype.el = '#profile-palette';

      ProfilePalette.prototype.initialize = function() {
        this.startListening();
        return this.addAll();
      };

      ProfilePalette.prototype.startListening = function() {
        United.EventBus.on('set-filter', this.setFilter, this);
        United.EventBus.on('nav-affix', this.affix, this);
        United.EventBus.on('nav-affix', this.affix, this);
        this.model.on('add:user', this.addOne, this);
        return this.model.on('reset:user', this.addAll, this);
      };

      ProfilePalette.prototype.stopLisening = function() {
        United.EventBus.off('set-filter', this.setFilter, this);
        United.EventBus.off('nav-affix', this.affix, this);
        United.EventBus.off('nav-affix', this.affix, this);
        this.model.off('add:user', this.addOne, this);
        return this.model.off('reset:user', this.addAll, this);
      };

      ProfilePalette.prototype.addOne = function(user) {
        var el, view;
        view = new United.Views.Tasks.UserBadge({
          model: user
        });
        el = view.render().$el;
        return this.$el.append(el);
      };

      ProfilePalette.prototype.addAll = function(users) {
        return this.model.get('users').each(this.addOne);
      };

      ProfilePalette.prototype.affix = function(toggle) {
        if (toggle === true) {
          return this.$el.addClass('affix');
        } else {
          return this.$el.removeClass('affix');
        }
      };

      ProfilePalette.prototype.setFilter = function(type, filter) {
        var users;
        this.$el.html('');
        if (type === null) {
          return this.addAll();
        }
        users = this.model.get('users').filter(function(user) {
          var matches;
          matches = user.get(type).filter(function(item) {
            return +item.get('id') === +filter;
          });
          return matches.length > 0;
        });
        if (users.length > 0) {
          return _.each(users, this.addOne);
        }
      };

      return ProfilePalette;

    })(Backbone.View);
  });

}).call(this);
