// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'jquery', 'ns', 'views/create-palette', 'views/profile-palette', 'views/task-timeline', 'views/graph-timeline', 'views/date-guides', 'views/edit-modal', 'models/edit-modal', 'models/task', 'views/scale-controller', 'models/scale-controller', 'views/graph-filters', 'models/graph-filters', 'views/view-selector', 'models/view-selector', 'views/calendar'], function(Backbone, _, $, namespace) {
    namespace('BU.EventBus');
    BU.EventBus = _.extend({}, Backbone.Events);
    namespace('BU.Views.App');
    return BU.Views.App = (function(_super) {

      __extends(App, _super);

      function App() {
        this.createNewTask = __bind(this.createNewTask, this);

        this.adjust = __bind(this.adjust, this);

        this.affix = __bind(this.affix, this);
        return App.__super__.constructor.apply(this, arguments);
      }

      App.prototype.el = '#schedule-viewport';

      App.prototype.events = {
        'selectstart': 'disableSelection',
        'click #new-task-toggle': 'createNewTask'
      };

      App.prototype.initialize = function() {
        BU.EventBus.on('open-modal', this.openModal, this);
        this.window = $(window);
        this.header = this.$('.navbar');
        this.dy = this.$el.offset().top;
        this.window.on('scroll', this.affix);
        this.window.on('resize', this.adjust);
        this.sub_views = _.extend({}, {
          graphTimeline: new BU.Views.GraphTimeline({
            model: this.model
          }),
          profilePalette: new BU.Views.ProfilePalette({
            model: this.model
          }),
          taskTimeline: new BU.Views.TaskTimeline({
            model: this.model
          }),
          dateGuides: new BU.Views.DateGuides,
          scaleController: new BU.Views.ScaleController({
            model: new BU.Models.ScaleController
          }),
          graphFilters: new BU.Views.GraphFilters({
            model: new BU.Models.GraphFilters
          }),
          viewSelector: new BU.Views.ViewSelector({
            model: new BU.Models.ViewSelector
          }),
          calendarView: new BU.Views.CalendarView({
            model: this.model
          })
        });
        return this.adjust();
      };

      App.prototype.disableSelection = function(e) {
        return e.preventDefault();
      };

      App.prototype.affix = function(e) {
        var scrollTop;
        scrollTop = this.window.scrollTop();
        BU.EventBus.trigger('on-scroll', scrollTop);
        if (scrollTop > this.dy) {
          this.header.addClass('affix');
          return BU.EventBus.trigger('nav-affix', true);
        } else {
          this.header.removeClass('affix');
          return BU.EventBus.trigger('nav-affix', false);
        }
      };

      App.prototype.adjust = function(e) {
        var h, w;
        w = this.window.width();
        h = this.window.height();
        return BU.EventBus.trigger('adjust', w, h);
      };

      App.prototype.createNewTask = function(e) {
        this.openModal();
        return e.preventDefault();
      };

      App.prototype.openModal = function(task) {
        var params;
        if (task == null) {
          task = null;
        }
        params = {};
        params['users'] = this.model.get('users');
        if (task !== null) {
          params['task'] = task;
        }
        this.modal = new BU.Views.EditModal({
          model: new BU.Models.EditModal(params)
        });
        return this.$el.append(this.modal.render().$el);
      };

      return App;

    })(Backbone.View);
  });

}).call(this);
