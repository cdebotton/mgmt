// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'ns', 'jst'], function(Backbone, ns) {
    ns('United.Views.Dashboard.PdoList');
    return United.Views.Dashboard.PdoList = (function(_super) {
      var MONTHS;

      __extends(PdoList, _super);

      function PdoList() {
        return PdoList.__super__.constructor.apply(this, arguments);
      }

      MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

      PdoList.prototype.el = '#pdo-list';

      PdoList.prototype.initialize = function() {
        return United.JST.Hb.registerHelper('printRequests', this.printRequests);
      };

      PdoList.prototype.render = function() {
        var ctx, html;
        ctx = this.model.toJSON();
        html = United.JST.PdoRequestList(ctx);
        this.$el.html(html);
        return this;
      };

      PdoList.prototype.printRequests = function(requests, opts) {
        var buffer, e, i, item, request, s, _i, _len;
        if (requests != null ? requests.length : void 0) {
          buffer = '';
          for (i = _i = 0, _len = requests.length; _i < _len; i = ++_i) {
            request = requests[i];
            s = request.start_date;
            e = request.end_date;
            item = {};
            item.id = request.id;
            item.type = (request.type.split(' ').map(function(word) {
              return word[0].toUpperCase() + word.slice(1).toLowerCase();
            })).join(' ');
            item.start = MONTHS[s.getMonth()] + '. ' + s.getDate() + ', ' + s.getFullYear();
            item.end = MONTHS[e.getMonth()] + '. ' + e.getDate() + ', ' + e.getFullYear();
            item.status = item.status === true ? 'Approved' : 'Unapproved';
          }
          return buffer += opts.fn(item);
        } else {
          return opts.inverse();
        }
      };

      return PdoList;

    })(Backbone.View);
  });

}).call(this);
