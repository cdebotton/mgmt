// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore', 'ns', 'jst'], function(Backbone, _, ns) {
    return United.Views.Tasks.UserCalendar = (function(_super) {

      __extends(UserCalendar, _super);

      function UserCalendar() {
        this.printSchedule = __bind(this.printSchedule, this);
        return UserCalendar.__super__.constructor.apply(this, arguments);
      }

      UserCalendar.prototype.tagName = 'article';

      UserCalendar.prototype.className = 'user-calendar-item';

      UserCalendar.prototype.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      UserCalendar.prototype.days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

      UserCalendar.prototype.initialize = function() {
        return United.JST.Hb.registerHelper('printSchedule', this.printSchedule);
      };

      UserCalendar.prototype.render = function() {
        var ctx, html;
        ctx = this.model.toJSON();
        ctx.events = this.renderDates();
        html = United.JST.UserCalendar(ctx);
        this.$el.html(html);
        return this;
      };

      UserCalendar.prototype.renderDates = function() {
        var current, date, dates, events, i, yesterday, _i, _j, _len, _len1;
        yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        current = this.model.get('tasks').filter(function(task) {
          return task.get('start_date') > yesterday || task.get('end_date') > yesterday;
        });
        dates = [];
        _.each(current, function(task) {
          dates.push(task.get('start_date').getTime());
          return dates.push(task.get('end_date').getTime());
        });
        dates.sort(function(a, b) {
          return a > b;
        });
        dates = _.unique(dates, true);
        for (i = _i = 0, _len = dates.length; _i < _len; i = ++_i) {
          date = dates[i];
          dates[i] = new Date(date);
        }
        events = [];
        for (_j = 0, _len1 = dates.length; _j < _len1; _j++) {
          date = dates[_j];
          events.push({
            date: date,
            tasks: _.filter(current, function(task) {
              var day, end, start;
              start = task.get('start_date').toString();
              end = task.get('end_date').toString();
              day = date.toString();
              return start === day || end === day;
            })
          });
        }
        return events;
      };

      UserCalendar.prototype.printSchedule = function(array, opts) {
        var buffer, date, day, dayVal, ev, item, month, task, task_item, year, _i, _j, _len, _len1, _ref, _ref1;
        if ((array != null ? array.length : void 0) > 0) {
          buffer = '';
          for (_i = 0, _len = array.length; _i < _len; _i++) {
            ev = array[_i];
            item = {};
            date = new Date(ev.date);
            item.list = [];
            month = this.months[date.getMonth()];
            day = date.getDate();
            year = date.getFullYear();
            dayVal = date.getDay() - 1;
            if (dayVal < 0) {
              dayVal = 6;
            }
            dayVal = this.days[dayVal];
            item.readableDate = "" + dayVal + " " + month + " " + day + ", " + year;
            if ((_ref = ev.tasks) != null ? _ref.length : void 0) {
              _ref1 = ev.tasks;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                task = _ref1[_j];
                task_item = {};
                task_item.color = task.get('color');
                if (task.get('start_date').toString() === date.toString()) {
                  task_item.title = "Begin " + (task.get('name')) + ", " + (task.get('client'));
                } else if (task.get('end_date').toString() === date.toString()) {
                  task_item.title = "Complete " + (task.get('name')) + ", " + (task.get('client'));
                }
                item.list.push(task_item);
              }
            } else {
              delete ev.tasks;
            }
            buffer += opts.fn(item);
          }
          return buffer;
        }
      };

      return UserCalendar;

    })(Backbone.View);
  });

}).call(this);
